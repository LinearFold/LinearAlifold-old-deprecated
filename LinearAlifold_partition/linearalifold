#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_integer('beam', 100, "set beam size, (DEFAULT=100)", short_name='b')
    flags.DEFINE_boolean('V', False, "use vienna parameters, (DEFAULT=FALSE)")
    flags.DEFINE_boolean('sharpturn', False, "enable sharp turn in prediction, (DEFAULT=FALSE)")
    flags.DEFINE_boolean('verbose', False, "print out runtime information, (DEFAULT=FALSE)")
    flags.DEFINE_string('output', '', "output base pairing probability matrix to a file with user specified name, (DEFAULT=FALSE)", short_name="o") # output mode
    flags.DEFINE_string('prefix', '', "output base pairing probability matrices to file(s) with user specified prefix name (DEFAULT=FALSE)") # prefix of file name
    flags.DEFINE_boolean('part', False, "only do partition function calculation, (DEFAULT=FALSE)", short_name='p') # adding partition function mode
    flags.DEFINE_string('r', '', "output base pairing probability matrix to a file with user specified name (rewrite if the file exists) (DEFAULT=FALSE)") # output (rewrite) mode
    flags.DEFINE_float('c', None, "only output base pair probability bigger than user specified threshold between 0 and 1 (DEFAULT=0.0)") # bpp cutoff
    flags.DEFINE_string("dumpforest", "", "dump forest (all nodes with inside [and outside] log partition functions but no hyperedges) for downstream tasks such as sampling and accessibility (DEFAULT=None)", short_name="f") # output (rewrite) mode
    flags.DEFINE_boolean('mea', False, "get MEA structure", short_name='M') 
    flags.DEFINE_float('gamma', 3., "set MEA gamma, (DEFAULT=3.0)", short_name='g')
    # flags.DEFINE_string('mea_output', '', "output MEA structure to a file with user specified name (rewrite if the file exists) (DEFAULT=FALSE)") # output (rewrite) mode
    flags.DEFINE_string('mea_prefix', '', "output MEA structure(s) to file(s) with user specified prefix name (DEFAULT=FALSE)") # output (rewrite) mode
    flags.DEFINE_boolean('bpseq', False, "output MEA structure(s) in bpseq format instead of dot-bracket format (DEFAULT=FALSE)") # output (rewrite) mode
    flags.DEFINE_boolean('threshknot', False, "get ThreshKnot structure", short_name='T') 
    flags.DEFINE_float('threshold', 0.3, "set ThreshKnot threshold (DEFAULT=0.3)")
    flags.DEFINE_string('threshknot_prefix', '', "output ThreshKnot structure(s) to file(s) in bpseq format with user specified prefix name (DEFAULT=FALSE)") # prefix of file name

    argv = FLAGS(sys.argv)

def main():
    use_vienna = FLAGS.V
    beamsize = str(FLAGS.b)
    is_sharpturn = '1' if FLAGS.sharpturn else '0'
    is_verbose = '1' if FLAGS.verbose else '0'
    bpp_file = str(FLAGS.o)
    bpp_prefix = str(FLAGS.prefix) + "_" if FLAGS.prefix else ''
    pf_only = '1' if (FLAGS.p and not (FLAGS.mea or FLAGS.threshknot)) else '0'
    bpp_cutoff = str(FLAGS.c)
    forest_file = str(FLAGS.dumpforest)
    mea = '1' if FLAGS.mea else '0'
    gamma = str(FLAGS.g)
    MEA_bpseq = '1' if FLAGS.bpseq else '0'
    MEA_prefix = str(FLAGS.mea_prefix) + "_" if FLAGS.mea_prefix else ''

    TK = '1' if FLAGS.threshknot else '0'
    threshold = str(FLAGS.threshold)
    ThreshKnot_prefix = str(FLAGS.threshknot_prefix) + "_" if FLAGS.threshknot_prefix else ''



    if FLAGS.p and (FLAGS.o or FLAGS.prefix):
        print("\nWARNING: -p mode has no output for base pairing probability matrix!\n");

    if FLAGS.o and FLAGS.r:
        print("WARNING: choose either -o mode or -r mode!\n");
        print("Exit!\n");
        exit();

    if (FLAGS.o or FLAGS.r) and FLAGS.prefix:
        print("WARNING: choose either -o/-r mode or --prefix mode!\n");
        print("Exit!\n");
        exit();

    if FLAGS.o:
        if os.path.exists(bpp_file):
            print("WARNING: this file name has already be taken. Choose another name or use -r mode.\n");
            print("Exit!\n");
            exit();

    if FLAGS.r:
        bpp_file = str(FLAGS.r)
        if os.path.exists(bpp_file): os.remove(bpp_file)

    if FLAGS.c:
        if float(bpp_cutoff) < 0.0 or float(bpp_cutoff) > 1.0:
            print("WARNING: base pair probability cutoff should be between 0.0 and 1.0\n");
            print("Exit!\n");
            exit();


    path = os.path.dirname(os.path.abspath(__file__))
    cmd = ["%s/%s" % (path, ('bin/linearalifold_p')), beamsize, is_sharpturn, is_verbose, bpp_file, bpp_prefix, pf_only, bpp_cutoff, forest_file, mea, gamma, TK, threshold, ThreshKnot_prefix, MEA_prefix, MEA_bpseq]
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

